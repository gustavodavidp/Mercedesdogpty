@page "/contabilidad"
@inject IDialogService Dialog
@using LetrasBlog.Infraestructure.Entities;
@using System.Net.Http;
@using Newtonsoft.Json;


<PageTitle>Contabilidad</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Usuarios</MudText>
@if(response == null)
{
    <label>Cargando...</label>
}
else
{

    <div class="row d-flex">
        @foreach(var item in _UsersList)
        {
            <div class="col-12 ml-2 mr-2">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@item.Id</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Book" Color="Color.Info" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@item.Username</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Read more</MudButton>
                        <MudText>Username x2 XD: @item.Username</MudText>
                    </MudCardActions>
                    
                </MudCard>
            </div>
        
        }
    </div>
}


@code {
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true };

    private static readonly HttpClient client = new HttpClient();
    public List<LetrasBlog.Infraestructure.Entities.Users.Data> _UsersList { get ; set ; } = new List<LetrasBlog.Infraestructure.Entities.Users.Data>() ;
    public LetrasBlog.Infraestructure.Entities.Users.response UsersResponse { get ; set ; } = new LetrasBlog.Infraestructure.Entities.Users.response() ;
    public string response;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var content = await client.GetAsync("https://localhost:44342" + "/api/Users/GetUsers");
            //Imprimir en consola
            response = content.Content.ReadAsStringAsync().ToString();
            Console.WriteLine(await content.Content.ReadAsStringAsync());

            //Procesar respuesta
            var responseString = await content.Content.ReadAsStringAsync();
            UsersResponse = JsonConvert.DeserializeObject<LetrasBlog.Infraestructure.Entities.Users.response>(responseString);
            _UsersList = UsersResponse.Detail;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.ToString());
        }
    }


}
