@page "/contabilidad"
@inject IDialogService Dialog
@using LetrasBlog.Infraestructure.Entities;
@using System.Net.Http;
@using Newtonsoft.Json;


<PageTitle>Contabilidad</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Usuarios</MudText>
@if(response == null)
{
    <label>Cargando...</label>
}
else
{

    <div class="col-12">
        <MudTable Items="@_UsersList" Dense="@dense" >
            <ToolBarContent>
                <MudText Typo="Typo.h6">Registros</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Servicio_Id</MudTh>
                <MudTh>Tipo</MudTh>
                <MudTh>Perro_Id</MudTh>
                <MudTh>Monto</MudTh>
                <MudTh>Fecha</MudTh>
                <MudTh>Observacion</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nr">@context.Id</MudTd>
                <MudTd DataLabel="Sign">@context.Servicio_Id</MudTd>
                <MudTd DataLabel="Name">@context.Tipo</MudTd>
                <MudTd DataLabel="Position">@context.Perro_Id</MudTd>
                <MudTd DataLabel="Molar mass">@context.Monto</MudTd>
                <MudTd DataLabel="Position">@context.Fecha</MudTd>
                <MudTd DataLabel="Molar mass">@context.Observacion</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
}


@code {
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true };
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";



    private static readonly HttpClient client = new HttpClient();
    public List<Contabilidades.Data> _UsersList { get ; set ; } = new List<Contabilidades.Data>() ;
    public Contabilidades.response UsersResponse { get ; set ; } = new Contabilidades.response() ;
    public string response;

    private bool FilterFunc1(Contabilidades.Data element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Contabilidades.Data element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Metodo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Monto.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Fecha} {element.Observacion} {element.Tipo}".Contains(searchString))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var content = await client.GetAsync("https://localhost:44342" + "/api/Contabilidades/GetContabilidades");
            //Imprimir en consola
            response = content.Content.ReadAsStringAsync().ToString();
            Console.WriteLine(await content.Content.ReadAsStringAsync());

            //Procesar respuesta
            var responseString = await content.Content.ReadAsStringAsync();
            UsersResponse = JsonConvert.DeserializeObject<Contabilidades.response>(responseString);
            _UsersList = UsersResponse.Detail;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.ToString());
        }
    }


}
